### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum Adjective {
  ROMANTIC
}

enum Allergy {
  DIARY
  EGG
  GLUTEN
  PEANUT
  SEAFOOD
  SESAME
  SOY
  SULPHITE
  TREE_NUT
  WHEAT
}

enum Cuisine {
  AMERICAN
  ASIAN
  BARBEQUE
  CAJUN_AND_CREOLE
  CHINESE
  CUBAN
  ENGLISH
  FRENCH
  GERMAN
  GREEK
  HAWAIIAN
  HUNGARIAN
  INDIAN
  IRISH
  ITALIAN
  JAPANESE
  MEDITERRANEAN
  MEXICAN
  MOROCCAN
  PORTUGUESE
  SOUTH_WESTERN
  SOUTHERN_AND_SOUL_FOOD
  SPANISH
  SWEDISH
  THAI
}

enum Currency {
  AUD
  NZD
}

enum Diet {
  KETOGENIC
  LOW_FOODMAP
  PALEO
  PESCATARIAN
  VEGAN
  VEGETARIAN
  VEGETARIAN_NO_MEAT_AND_DAIRY
  VEGETARIAN_NO_MEAT_AND_EGGS
}

"""Verify email follows the format and lower case it"""
scalar Email

type ingredient {
  name: String
  price: price
}

type ingredientConnection {
  edges: [ingredientEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type ingredientEdge {
  cursor: String
  node: ingredient
}

enum Meal {
  BREAKFAST
  DINNER
  LUNCH
}

type Mutation {
  deleteUser(email: Email): User
  ingredients(amount: Float, currency: Currency, name: String!): ingredient
  login(email: Email!, password: String!): String
  register(email: Email!, password: String!): User
  saveRecipe(adjectives: [Adjective], allergies: [Allergy], cuisines: [Cuisine], diets: [Diet], ingredients: [recipeIngredientArg], link: String, meals: [Meal], name: String!, numSaved: Int, prepTime: String, servings: Int): recipe
}

interface Node {
  """GUID for a resource"""
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type price {
  amount: Float
  currency: String
}

input priceArg {
  amount: Float!
  currency: String!
}

type Query {
  filterIngredientsByPrice(currency: Currency!, maxAmount: Float, minAmount: Float!): [ingredient]
  filterRecipes(adjectives: [Adjective], allergies: [Allergy], cuisines: [Cuisine], diets: [Diet], ingredients: [recipeIngredientArg], meals: [Meal]): [recipe]
  ingredients(cursor: String, first: Int, last: Int): ingredientConnection
  ingredientsByName(name: String!): [ingredient]
  node(id: ID!): Node
  recipes(cursor: String, first: Int, last: Int): recipeConnection
  recipesById(link: String!): recipe
  recipesByLink(id: Int!): recipe
  renewToken: String
  User(email: String): User
}

type recipe {
  adjectives: [String]
  allergies: [String]
  cuisines: [String]
  diets: [String]
  id: String
  ingredients: [recipeIngredient]
  link: String
  meals: [String]
  name: String
  numSaved: Int
  prepTime: String
  servings: Int
}

type recipeConnection {
  edges: [recipeEdge]
  pageInfo: PageInfo
  totalCount: Int
}

type recipeEdge {
  cursor: String
  node: recipe
}

type recipeIngredient {
  amount: Int
  measurement: String
  name: String
  price: price
  text: String
}

input recipeIngredientArg {
  amount: Int
  measurement: String
  name: String
  price: priceArg
  text: String
}

type User implements Node {
  """user email."""
  email: String

  """GUID for a resource"""
  id: ID

  """user name that will be shown to others."""
  nickname: String
}
