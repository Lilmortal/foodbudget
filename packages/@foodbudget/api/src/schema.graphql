### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum adjectives {
  ROMANTIC
}

enum allergies {
  DIARY
  EGG
  GLUTEN
  PEANUT
  SEAFOOD
  SESAME
  SOY
  SULPHITE
  TREE_NUT
  WHEAT
}

enum cuisines {
  AMERICAN
  ASIAN
  BARBEQUE
  CAJUN_AND_CREOLE
  CHINESE
  CUBAN
  ENGLISH
  FRENCH
  GERMAN
  GREEK
  HAWAIIAN
  HUNGARIAN
  INDIAN
  IRISH
  ITALIAN
  JAPANESE
  MEDITERRANEAN
  MEXICAN
  MOROCCAN
  PORTUGUESE
  SOUTH_WESTERN
  SOUTHERN_AND_SOUL_FOOD
  SPANISH
  SWEDISH
  THAI
}

enum currencies {
  AUD
  NZD
}

enum diets {
  KETOGENIC
  LOW_FOODMAP
  PALEO
  PESCATARIAN
  VEGAN
  VEGETARIAN
  VEGETARIAN_NO_MEAT_AND_DAIRY
  VEGETARIAN_NO_MEAT_AND_EGGS
}

type ingredient {
  name: String
  price: price
}

enum meals {
  BREAKFAST
  DINNER
  LUNCH
}

type Mutation {
  deleteUser(id: Int!): String
  ingredients(amount: Float, currency: String, name: String!): ingredient
  login(email: String!, password: String!): String
  recipes(adjectives: [adjectives], allergies: [allergies], cuisines: [cuisines], diets: [diets], id: Int, ingredients: [recipeIngredientArg], link: String, meals: [meals], name: String!, numSaved: Int, prepTime: String, servings: Int): recipe
  register(email: String!, password: String!): user
}

type price {
  amount: Float
  currency: String @deprecated(reason: "hmm")
}

input priceArg {
  amount: Float!
  currency: String!
}

type Query {
  filterIngredientsByPrice(currency: currencies!, maxAmount: Float, minAmount: Float!): [ingredient]
  ingredientsByName(name: String!): [ingredient]
  recipes(adjectives: [adjectives], allergies: [allergies], cuisines: [cuisines], diets: [diets], id: Int, ingredients: [recipeIngredientArg], link: String, meals: [meals], name: String, numSaved: Int, prepTime: String, servings: Int): [recipe]
  recipesById(link: String!): recipe
  recipesByLink(id: Int!): recipe
  renewToken: String
  user(email: String, id: Int): user
}

type recipe {
  adjectives: [String]
  allergies: [String]
  cuisines: [String]
  diets: [String]
  id: String
  ingredients: [recipeIngredient]
  link: String
  meals: [String]
  name: String
  numSaved: Int
  prepTime: String
  servings: Int
}

type recipeIngredient {
  name: String
  price: price
  quantity: Int
}

input recipeIngredientArg {
  name: String
  price: priceArg
  quantity: Int
}

type user {
  """user email."""
  email: String

  """user name that will be shown to others."""
  nickname: String
}
