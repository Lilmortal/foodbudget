generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model adjectives {
  type              String              @id
  recipe_adjectives recipe_adjectives[]
}

model allergies {
  type             String             @id
  recipe_allergies recipe_allergies[]
  user_allergies   user_allergies[]
}

model cuisines {
  type            String            @id
  recipe_cuisines recipe_cuisines[]
}

model meals {
  id           Int            @id @default(autoincrement())
  name         String
  recipe_meals recipe_meals[]
}

model diets {
  type         String         @id
  recipe_diets recipe_diets[]
  user_diets   user_diets[]
}

model ingredients {
  name               String               @id
  price_currency     String
  price_amount       Float
  recipe_ingredients recipe_ingredients[]
  user_pantries      user_pantries[]
}

model recipe_adjectives {
  id         Int         @id @default(autoincrement())
  recipe_id  Int?
  type       String?
  adjectives adjectives? @relation(fields: [type], references: [type])
  recipes    recipes?    @relation(fields: [recipe_id], references: [id])
}

model recipe_allergies {
  id        Int        @id @default(autoincrement())
  recipe_id Int?
  type      String?
  allergies allergies? @relation(fields: [type], references: [type])
  recipes   recipes?   @relation(fields: [recipe_id], references: [id])
}

model recipe_cuisines {
  id        Int       @id @default(autoincrement())
  recipe_id Int?
  type      String?
  cuisines  cuisines? @relation(fields: [type], references: [type])
  recipes   recipes?  @relation(fields: [recipe_id], references: [id])
}

model recipe_diets {
  id        Int      @id @default(autoincrement())
  recipe_id Int?
  type      String?
  diets     diets?   @relation(fields: [type], references: [type])
  recipes   recipes? @relation(fields: [recipe_id], references: [id])
}

model recipe_ingredients {
  recipe_link     String
  ingredient_name String
  quantity        Float
  ingredients     ingredients @relation(fields: [ingredient_name], references: [name])
  recipes         recipes     @relation(fields: [recipe_link], references: [link])

  @@id([recipe_link, ingredient_name])
}

model recipe_meals {
  id        Int      @id @default(autoincrement())
  recipe_id Int?
  meals_id  Int?
  meals     meals?   @relation(fields: [meals_id], references: [id])
  recipes   recipes? @relation(fields: [recipe_id], references: [id])
}

enum Cuisine {
  AMERICAN
  ITALIAN
  ASIAN
  MEXICAN
  SOUTHERN_AND_SOUL_FOOD
  FRENCH
  SOUTH_WESTERN
  BARBEQUE
  INDIAN
  CHINESE
  CAJUN_AND_CREOLE
  MEDITERRANEAN
  GREEK
  ENGLISH
  SPANISH
  THAI
  GERMAN
  MOROCCAN
  IRISH
  JAPANESE
  CUBAN
  HAWAIIAN
  SWEDISH
  HUNGARIAN
  PORTUGUESE
}

enum Diet {
  KETOGENIC
  VEGETARIAN_NO_MEAT_AND_EGGS
  VEGETARIAN_NO_MEAT_AND_DAIRY
  PESCATARIAN
  VEGAN
  LOW_FOODMAP
  VEGETARIAN
  PALEO
}

enum Allergy {
  GLUTEN
  PEANUT
  SEAFOOD
  SESAME
  SOY
  DIARY
  EGG
  SULPHITE
  TREE_NUT
  WHEAT
}

enum Meal {
  BREAKFAST
  LUNCH
  DINNER
}

model recipes {
  id                 Int                  @id @default(autoincrement())
  name               String
  link               String               @unique
  prep_time          String
  servings           Float
  num_saved          Float
  recipe_adjectives  String[]
  recipe_allergies   Allergy[]
  recipe_cuisines    Cuisine[]
  recipe_diets       Diet[]
  recipe_meals       Meal[]
  recipe_ingredients recipe_ingredients[]
  user_saved_recipes user_saved_recipes[]
}

model user_allergies {
  id        Int        @id @default(autoincrement())
  user_id   Int?
  type      String?
  allergies allergies? @relation(fields: [type], references: [type])
  users     users?     @relation(fields: [user_id], references: [id])
}

model user_diets {
  id      Int     @id @default(autoincrement())
  user_id Int?
  type    String?
  diets   diets?  @relation(fields: [type], references: [type])
  users   users?  @relation(fields: [user_id], references: [id])
}

model user_pantries {
  id          Int          @id @default(autoincrement())
  user_id     Int?
  name        String?
  ingredients ingredients? @relation(fields: [name], references: [name])
  users       users?       @relation(fields: [user_id], references: [id])
}

model user_saved_recipes {
  id        Int      @id @default(autoincrement())
  user_id   Int?
  recipe_id Int?
  recipes   recipes? @relation(fields: [recipe_id], references: [id])
  users     users?   @relation(fields: [user_id], references: [id])
}

model users {
  id                 Int                  @id @default(autoincrement())
  google_id          String?              @unique
  facebook_id        String?              @unique
  email              String               @unique
  password           String?
  nickname           String?
  user_allergies     user_allergies[]
  user_diets         user_diets[]
  user_pantries      user_pantries[]
  user_saved_recipes user_saved_recipes[]
}
