version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@01.4.0
  aws-cli: circleci/aws-cli@1.3.1
  swissknife: roopakv/swissknife@0.54.0

jobs:
  build:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - run: yarn
      - save_cache:
          paths:
            - node_modules
            - packages/@foodbudget/backend/api/node_modules
            - packages/@foodbudget/backend/email/node_modules
            - packages/@foodbudget/backend/jobs/node_modules
            - packages/@foodbudget/frontend/node_modules
          key: v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
  lint:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - "27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b"
      - run: yarn setup
      - run: yarn lint
  frontEndUnitTest:
    docker:
      - image: circleci/node:14.11.0-browsers
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - "27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b"
      - run: yarn setup:ui
      - run: yarn ci:ui-test
  backEndUnitTest:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - "27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b"
      - run: yarn setup:server
      - run: yarn ci:server-test
  backEndIntegrationTest:
    docker:
      - image: circleci/node:14.11.0-browsers
      - image: circleci/postgres:10.6-alpine
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - "27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b"
      - run: yarn setup:server
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run: yarn ci:server-int
  release:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - "27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b"
      - run: git config --global user.email "thefoodbudget@gmail.com"
      - run: git config --global user.name "Food Budget"
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - run: npm get registry
      - run: npm whoami
      - run: yarn setup
      - run: yarn release
      - run: git push --follow-tags origin master
  aws-job-deploy:
    docker:
      - image: circleci/node:14.11.0
        user: root
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - swissknife/trigger_pipeline_if_modified:
          pattern: ^(packages/@foodbudget/backend/jobs).*
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION
          skip-install-check: true
      - run: chmod 755 ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: docker-compose build foodbudget-jobs
      - run: aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com
      - run: docker tag foodbudget-jobs:latest 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-jobs:latest
      - run: docker push 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-jobs:latest
  aws-api-deploy:
    docker:
      - image: circleci/node:14.11.0
        user: root
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - swissknife/trigger_pipeline_if_modified:
          pattern: ^(packages/@foodbudget/backend/api).*
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION
          skip-install-check: true
      - run: chmod 755 ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: docker-compose build foodbudget-api
      - run: aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com
      - run: docker tag foodbudget-api:latest 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-api:latest
      - run: docker push 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-api:latest
      # - aws-ecs/update-service:
      #     family: "${ECS_SERVICE_NAME}"
      #     cluster-name: "${ECS_CLUSTER_NAME}"
      #     container-image-name-updates: "container=${ECS_SERVICE_NAME},image-and-tag=${FULL_IMAGE_NAME}"
      #     container-env-var-updates: "container=${ECS_SERVICE_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_SERVICE_NAME},name=BUILD_DATE,value=\"$(date)\""
      #     verify-revision-is-deployed: true
commands:
  create_concatenated_yarn_lock:
    description: "Concatenate all yarn.lock files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine yarn.lock files to single file
          # TODO: Fix this
          # command: npx lerna la -a | awk -F packages '{printf "\"packages%s/yarn.lock\" ", $2}' | xargs ls -d 2> /dev/null | xargs cat > << parameters.filename >>
          command: echo packages/@foodbudget/backend/api/yarn.lock | xargs cat > << parameters.filename >>
workflows:
  version: 2
  verify:
    jobs:
      - build
      - lint:
          requires:
            - build
      - frontEndUnitTest:
          requires:
            - build
      - backEndUnitTest:
          requires:
            - build
      - backEndIntegrationTest:
          requires:
            - build
      - release:
          filters:
            branches:
              only: master
          requires:
            - lint
            - frontEndUnitTest
            - backEndUnitTest
            - backEndIntegrationTest
      - aws-api-deploy:
          filters:
            branches:
              only: master
          requires:
            - lint
            - frontEndUnitTest
            - backEndUnitTest
            - backEndIntegrationTest
