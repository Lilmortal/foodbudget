version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@01.4.0
  aws-cli: circleci/aws-cli@1.3.1
  swissknife: roopakv/swissknife@0.54.0

jobs:
  build_node_modules:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - run: yarn --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
            - packages/@foodbudget/backend/api/node_modules
            - packages/@foodbudget/backend/email/node_modules
            - packages/@foodbudget/backend/jobs/node_modules
            - packages/@foodbudget/frontend/node_modules
          key: v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
      - swissknife/trigger-workflows-for-all-modified:
          base-branch: master
          run-mode-for-base-branch: run_for_last_commit
          code-param-name-map: '
            [
            {"regex": "^(packages/@foodbudget/backend/api).*", "param_name": "api_workflow"},
            {"regex": "^(packages/@foodbudget/backend/jobs).*", "param_name": "jobs_workflow"},
            {"regex": "^(packages/@foodbudget/frontend).*", "param_name": "frontend_workflow"}
            ]'
          additional-param-map: '{"build_workflow": false}'
  setup_backend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - run: yarn setup:server
      - save_cache:
          paths:
            - node_modules/.prisma
            - packages/@foodbudget/backend/api/dist
            - packages/@foodbudget/backend/email/dist
            - packages/@foodbudget/backend/jobs/dist
            - packages/@foodbudget/backend/logger/dist
          key: backend-setup-cache
  setup_frontend:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - run: yarn setup:ui
      - save_cache:
          paths:
            - packages/@foodbudget/frontend/src/__generated__
          key: frontend-setup-cache
  lint:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - '27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b'
      - run: yarn lint
  frontend_unit_test:
    docker:
      - image: circleci/node:14.11.0-browsers
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - restore_cache:
          keys:
            - frontend-setup-cache
      - add_ssh_keys:
          fingerprints:
            - '27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b'
      - run: yarn ci:ui-test
  backend_unit_test:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - restore_cache:
          keys:
            - backend-setup-cache
      - add_ssh_keys:
          fingerprints:
            - '27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b'
      - run: yarn ci:server-test
  backend_integration_test:
    docker:
      - image: circleci/node:14.11.0-browsers
      - image: circleci/postgres:10.6-alpine
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - restore_cache:
          keys:
            - backend-setup-cache
      - add_ssh_keys:
          fingerprints:
            - '27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b'
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run: yarn ci:server-int
  release:
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - create_concatenated_yarn_lock:
          filename: combined-yarn-lock.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "combined-yarn-lock.txt" }}
            - v1-dependencies
      - add_ssh_keys:
          fingerprints:
            - '27:cc:f8:7a:36:04:b8:63:b5:8f:4d:7f:ad:8a:97:4b'
      - run: git config --global user.email "thefoodbudget@gmail.com"
      - run: git config --global user.name "Food Budget"
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - run: npm get registry
      - run: npm whoami
      - run: yarn release
      - run: git push --follow-tags origin master
  jobs_deploy:
    docker:
      - image: circleci/node:14.11.0
        user: root
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - swissknife/trigger_pipeline_if_modified:
          pattern: ^(packages/@foodbudget/backend/jobs).*
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION
          skip-install-check: true
      - run: chmod 755 ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: docker-compose build foodbudget-jobs
      - run: aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com
      - run: docker tag foodbudget-jobs:latest 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-jobs:latest
      - run: docker push 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-jobs:latest
  api_deploy:
    docker:
      # TODO: Don't need node
      - image: circleci/node:14.11.0
        user: root
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - swissknife/trigger_pipeline_if_modified:
          pattern: ^(packages/@foodbudget/backend/api).*
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_KEY
          aws-region: AWS_REGION
          skip-install-check: true
      - run: chmod 755 ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: ./packages/@foodbudget/deploy/scripts/create_env_file.sh
      - run: docker-compose build foodbudget-api
      - run: aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com
      - run: docker tag foodbudget-api:latest 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-api:latest
      - run: docker push 197204282783.dkr.ecr.ap-southeast-2.amazonaws.com/foodbudget-api:latest
  rerun_ec2:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run: (cd packages/@foodbudget/deploy && terraform init)
      - run: (cd packages/@foodbudget/deploy && terraform taint "module.instance.aws_instance.ec2")
      - run: (cd packages/@foodbudget/deploy && terraform apply -auto-approve)

commands:
  create_concatenated_yarn_lock:
    description: 'Concatenate all yarn.lock files recognized by lerna.js into single file. File is used as checksum source for part of caching key.'
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine yarn.lock files to single file
          # TODO: Fix this
          # command: npx lerna la -a | awk -F packages '{printf "\"packages%s/yarn.lock\" ", $2}' | xargs ls -d 2> /dev/null | xargs cat > << parameters.filename >>
          command: echo packages/@foodbudget/backend/api/yarn.lock | xargs cat > << parameters.filename >>

workflows:
  version: 2
  build_workflow:
    when: << pipeline.parameters.build_workflow >>
    jobs:
      - build_node_modules
  api_workflow:
    when: << pipeline.parameters.api_workflow >>
    jobs:
      - setup_backend
      - lint:
          requires:
            - setup_backend
      - backend_unit_test:
          requires:
            - setup_backend
      - backend_integration_test:
          requires:
            - setup_backend
      - release:
          filters:
            branches:
              only: master
          requires:
            - lint
            - backend_unit_test
            - backend_integration_test
      - api_deploy:
          filters:
            branches:
              only: master
          requires:
            - lint
            - backend_unit_test
            - backend_integration_test
      - rerun_ec2:
          filters:
            branches:
              only: master
          requires:
            - api-deploy
            - jobs-deploy
  jobs_workflow:
    when: << pipeline.parameters.jobs_workflow >>
    jobs:
      - setup_backend
      - lint:
          requires:
            - setup_backend
      - backend_unit_test:
          requires:
            - setup_backend
      - backend_integration_test:
          requires:
            - setup_backend
      - release:
          filters:
            branches:
              only: master
          requires:
            - lint
            - backend_unit_test
            - backend_integration_test
      - jobs_deploy:
          filters:
            branches:
              only: master
          requires:
            - lint
            - backend_unit_test
            - backend_integration_test
      - rerun_ec2:
          filters:
            branches:
              only: master
          requires:
            - api-deploy
            - jobs-deploy
  frontend_workflow:
    when: << pipeline.parameters.frontend_workflow >>
    jobs:
      - setup_frontend
      - lint:
          requires:
            - setup_frontend
      - frontend_unit_test:
          requires:
            - setup_frontend
      - release:
          filters:
            branches:
              only: master
          requires:
            - lint
            - frontend_unit_test

#TODO: workflow for discord bots, and shared folders
parameters:
  build_workflow:
    default: true
    type: boolean
  api_workflow:
    default: false
    type: boolean
  jobs_workflow:
    default: false
    type: boolean
  frontend_workflow:
    default: false
    type: boolean
